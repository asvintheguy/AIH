###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class ConsolidatedFeatures(BaseModel):
    features: List["FeatureInfo"]

class DatasetInfo(BaseModel):
    title: Optional[str] = None
    url: Optional[str] = None
    relevanceScore: Optional[float] = None
    description: Optional[str] = None

class FeatureInfo(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    dataType: Optional[str] = None
    datasetSources: List[str]
    possibleValues: List[str]

class HealthRiskReport(BaseModel):
    assessments: List["RiskAssessment"]
    recommendations: List[str]

class ModelEvaluation(BaseModel):
    modelName: Optional[str] = None
    accuracy: Optional[float] = None
    f1Score: Optional[float] = None
    datasetTitle: Optional[str] = None

class RiskAssessment(BaseModel):
    disease: Optional[str] = None
    riskLevel: Optional[str] = None
    confidence: Optional[float] = None
    datasetUsed: Optional[str] = None
    modelUsed: Optional[str] = None

class SearchQueries(BaseModel):
    queries: List[str]
