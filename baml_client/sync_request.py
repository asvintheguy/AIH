###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type, Literal
from typing_extensions import NotRequired

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AssessHealthRisk(
        self,
        symptoms: str,patientData: str,modelEvaluations: List[types.ModelEvaluation],dataset: types.DatasetInfo,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AssessHealthRisk",
        {
          "symptoms": symptoms,"patientData": patientData,"modelEvaluations": modelEvaluations,"dataset": dataset,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ConsolidateFeatures(
        self,
        datasetFeatures: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ConsolidateFeatures",
        {
          "datasetFeatures": datasetFeatures,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def EvaluateDatasetRelevance(
        self,
        symptoms: str,datasets: List[types.DatasetInfo],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateDatasetRelevance",
        {
          "symptoms": symptoms,"datasets": datasets,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def EvaluateModels(
        self,
        dataset: types.DatasetInfo,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateModels",
        {
          "dataset": dataset,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateHealthReport(
        self,
        symptoms: str,assessments: List[types.RiskAssessment],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateHealthReport",
        {
          "symptoms": symptoms,"assessments": assessments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateSearchQueries(
        self,
        symptoms: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateSearchQueries",
        {
          "symptoms": symptoms,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def HealthRiskAgent(
        self,
        symptoms: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "HealthRiskAgent",
        {
          "symptoms": symptoms,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AssessHealthRisk(
        self,
        symptoms: str,patientData: str,modelEvaluations: List[types.ModelEvaluation],dataset: types.DatasetInfo,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AssessHealthRisk",
        {
          "symptoms": symptoms,"patientData": patientData,"modelEvaluations": modelEvaluations,"dataset": dataset,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ConsolidateFeatures(
        self,
        datasetFeatures: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ConsolidateFeatures",
        {
          "datasetFeatures": datasetFeatures,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def EvaluateDatasetRelevance(
        self,
        symptoms: str,datasets: List[types.DatasetInfo],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateDatasetRelevance",
        {
          "symptoms": symptoms,"datasets": datasets,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def EvaluateModels(
        self,
        dataset: types.DatasetInfo,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateModels",
        {
          "dataset": dataset,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateHealthReport(
        self,
        symptoms: str,assessments: List[types.RiskAssessment],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateHealthReport",
        {
          "symptoms": symptoms,"assessments": assessments,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateSearchQueries(
        self,
        symptoms: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateSearchQueries",
        {
          "symptoms": symptoms,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def HealthRiskAgent(
        self,
        symptoms: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "HealthRiskAgent",
        {
          "symptoms": symptoms,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]